;; Godel numbers for combinators using Scott's pairing function
(define (godel-scott c)
  (cond ((and (pair? c)
              (null? (cdr c))) (godel-scott (car c)))
        ((equal? c 'J) 0)
        ((equal? c 'S) 1)
        ((equal? c 'K) 2)
        (else (+ 2 (* (expt 2 (godel-scott (car c)))
                      (+ (* 2 (godel-scott (cadr c))) 1))))))

;; Godel numbers for combinators using Cantor's pairing function
(define (godel-cantor c)
  (cond ((and (pair? c)
              (null? (cdr c))) (godel-cantor (car c)))
        ((equal? c 'J) 0)
        ((equal? c 'S) 1)
        ((equal? c 'K) 2)
        (else (let ((k1 (godel-cantor (car c)))
                    (k2 (godel-cantor (cadr c))))
                (+ 3 (/ (* (+ k1 k2)
                           (+ k1 k2 1))
                        2)
                   k2)))))

(define (crossmap fn L1 L2)
  (cond ((null? L1) '())
        (else (append (map (lambda (x)
                             (fn (car L1) x))
                           L2)
                      (crossmap fn (cdr L1) L2)))))

(define comb1 '(J S K))
(define comb2 (crossmap list comb1 (map list comb1)))
(define comb3 (append (crossmap list comb1 comb2)
                      (crossmap list comb2 comb1)))

(define comb4 (append (crossmap list comb1 comb3)
                      (crossmap list comb2 comb2)
                      (crossmap list comb3 comb1)))
